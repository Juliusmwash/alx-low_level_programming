#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "lists.h"

/**
 * print_listint - prints all the elements of the list
 * @h: head pointer to the list
 * Return: number of nodes
 */

size_t print_listint(const listint_t *h)
{
        size_t count;

        count = 0;
        while(h)
        {
                printf("%d\n", h->n);
                h = h->next;
                count++;
        }
        return (count);
}

/**
 * listint_len - calculates the number of elements in the list
 * @h: pointer to head of the list
 * Return: number of elements in the list
 */

size_t listint_len(const listint_t *h)
{
        size_t count;

        count = 0;
        while (h)
        {
                count++;
                h = h->next;
        }
        return (count);
}
/**
 * free_listint - frees list                                   * @head: linked list head
 * Return: Nothing
 */

void free_listint(listint_t *head)
{                                                                     listint_t *tmp;

        while(head)
        {
                tmp = head;
                head = tmp->next;
                free(tmp);
                tmp = NULL;
        }
}

/**
 * add_nodeint - adds list node at the beginning
 * @head: pointer to the head pointer
 * @n: data to add
 * Return: address of the new node
 */
/**
 * *
 * free_listint2 - frees list
 * @head: pointer to linked list head
 */

void free_listint2(listint_t **head)                          {
        listint_t *tmp;

        while(*head)
        {
                tmp = *head;                                                  if ((*head)->next)
                {
                        *head = tmp->next;
                        free(tmp);
                        tmp = NULL;
                }
		else
                {
                        free(tmp);                                                    *head = NULL;
                        tmp = NULL;
                }
	}
}

/**                                                            * pop_listint - deletes first node
 * @head: linked list first node
 * Return: head's node data
 */

int pop_listint(listint_t **head)
{
        listint_t *tmp;
        size_t data;

        if (*head == NULL)
                return (0);
        tmp = *head;
        *head = (*head)->next;
        data = tmp->n;
        free(tmp);
        tmp = NULL;
        return (data);
}
/**                                                            * get_nodeint_at_index - gets the required node
 * @head: linked list first node                               * @index: index of the required node
 * Return: nth node
 */                                                           
listint_t *get_nodeint_at_index(listint_t *head, unsigned int index)
{
        size_t count;                                                                                                               count = 0;
        while(count <= index && head)
        {                                                                     if (count == index)
                        return (head);
                else                                                          {
                        head = head->next;
                        count++;
                }
        }
        return (NULL);
}

/**                                                                                * insert_nodeint_helper - performs necessary operations to enhance insertion      * @temp: pointer to linked list
 * @temp1: pointer to linked list                                                  * Return: Nothing
 */                                                                           

/**                                                                                              * insert_nodeint_helper - performs necessary operations to enhance insertion                    * @temp: pointer to linked list                                                                 * @temp1: pointer to linked list                                                                * Return: Nothing                                                                               */                                                                                             int insert_nodeint_helper(listint_t **temp, listint_t **temp1, unsigned int idx)
{
        unsigned int count;                                                                                                                                                                             count = 0;                                                                                      while (count < idx)
        {
                if (*temp)
                {
                        *temp = (*temp)->next;
                        count++;
                }
                else
                        break;
        }
        count = 0;
        while (count <= idx)
        {
                if (*temp1)
                {
                        *temp1 = (*temp1)->next;
                        count++;
                }
                else
                        return (0);
        }
	return (0);
}

/**
 * insert_nodeint_at_index - inserts node
 * @head: first node
 * @idx: index to add node
 * @n: data to add
 * Return: new node
 */

listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n)
{
        listint_t *temp, *mem, *temp1;
        unsigned int check;
                                                                                                        mem = malloc(sizeof(struct listint_s));                                                         if (mem == NULL)                                                                                        return (NULL);
        mem->n = n;                                                                                     temp = *head;                                                                                   temp1 = *head;
        check = insert_nodeint_helper(&temp, &temp1, idx);                                                if (check == 0)                                                                                         return (0);                                                                             if (idx == 0)
        {
                mem->next = temp;
                *head = mem;
        }
        else
        {
        mem->next = temp1;
        temp->next = mem;
        }
        return (mem);
}
/**                                                            
 * sum_listint - adds all the data in the list;
 * @head: first node of the list
 * Return: sum of all the data in the list
 */

int sum_listint(listint_t *head)
{
        int sum;

        sum = 0;
        if (head == NULL)
                return (0);
        while(head)                                                   {                                                                     sum += head->n;                                               head = head->next;                                    }                                                             return (sum);                                         }
listint_t *add_nodeint(listint_t **head, const int n)
{
        listint_t *tmp, *mem;

        mem = malloc(sizeof(struct listint_s));
        if (mem == NULL)
                return (NULL);
        mem->n = n;

        if (*head == NULL)
        {
                mem->next = NULL;
                *head = mem;
        }
        else
        {
                tmp = *head;
                mem->next = tmp;
                *head = mem;
        }
        return (mem);
}
/**
 * main - check the code
 * 
 * Return: Always 0.
 */
/**
 * add_nodeint_end - function adding list node at the end
 * @head: list head                                            * @n: data to add to the list
 * Return: pointer to newly added node
 */

listint_t *add_nodeint_end(listint_t **head, const int n)
{                                                                     listint_t *temp, *mem;

        temp = *head;
        mem = malloc(sizeof(struct listint_s));
        if (mem == NULL)                                                      return (NULL);
        mem->n = n;
        mem->next = NULL;

        if (*head == NULL)
                *head = mem;
        else
        {
                while (temp->next)                                                    temp = temp->next;
                temp->next = mem;                                     }
        return (mem);
}


/*
int main(void)
{
    listint_t *head;
    listint_t *new;
    listint_t hello = {8, NULL};
    size_t n;

    head = &hello;
    new = malloc(sizeof(listint_t));
    if (new == NULL)
    {
        printf("Error\n");
        return (1);
    }
    new->n = 9;
    new->next = head;
    head = new;
    n = print_listint(head);
    printf("-> %lu elements\n", n);
    free(new);
    return (0);
}
int main(void)
{
    listint_t *head;
    listint_t *new;
    listint_t hello = {8, NULL};
    size_t n;

    head = &hello;
    new = malloc(sizeof(listint_t));
    if (new == NULL)
    {
        printf("Error\n");
        return (1);
    }
    new->n = 9;
    new->next = head;
    head = new;
    n = listint_len(head);
    printf("-> %lu elements\n", n);
    free(new);
    return (0);
}
int main(void)
{
    listint_t *head;

    head = NULL;
    add_nodeint(&head, 0);
    add_nodeint(&head, 1);
    add_nodeint(&head, 2);
    add_nodeint(&head, 3);
    add_nodeint(&head, 4);
    add_nodeint(&head, 98);
    add_nodeint(&head, 402);
    add_nodeint(&head, 1024);
    print_listint(head);
    return (0);
}
int main(void)
{
    listint_t *head;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
    //print_listint(head);
    free_listint(head);
    print_listint(head);
    head = NULL;
    return (0);
}
int main(void)
{
    listint_t *head;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
   // print_listint(head);
    free_listint2(&head);
    //free_listint2(&head);
    printf("%p\n", (void *)head);
    if (head == NULL)
	    printf("yes am null\n");
    return (0);
}

int main(void)
{
    listint_t *head;
    int n;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
    print_listint(head);
    n = pop_listint(&head);
    printf("- %d\n", n);
    print_listint(head);
    n = pop_listint(&head);
    printf("- %d\n", n);
    print_listint(head);
    free_listint2(&head);
    printf("%p\n", (void *)head);
    return (0);
}

int main(void)
{
    listint_t *head;
    listint_t *node;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
    print_listint(head);
    node = get_nodeint_at_index(head, 5);
    printf("%d\n", node->n);
    print_listint(head);
    free_listint2(&head);
    return (0);
}
int main(void)
{
    listint_t *head;
    int sum;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
    sum = sum_listint(head);
    printf("sum = %d\n", sum);
    free_listint2(&head);
    return (0);
}*/
int main(void)
{
    listint_t *head;
    void *check;

    head = NULL;
    add_nodeint_end(&head, 0);
    add_nodeint_end(&head, 1);
    add_nodeint_end(&head, 2);
    add_nodeint_end(&head, 3);
    add_nodeint_end(&head, 4);
    add_nodeint_end(&head, 98);
    add_nodeint_end(&head, 402);
    add_nodeint_end(&head, 1024);
    print_listint(head);
    printf("-----------------\n");
   check = insert_nodeint_at_index(&head, 20,  4096);
   printf("\ncheck: %p\n", check);
    print_listint(head);
    free_listint2(&head);
    return (0);
}
